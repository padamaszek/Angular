import { ValidationMetadata } from "./ValidationMetadata";
import { ConstraintMetadata } from "./ConstraintMetadata";
/**
 * Storage all metadatas of validations.
 */
export declare class MetadataStorage {
    private _validationMetadatas;
    private _constraintMetadatas;
    /**
     * Gets all validation metadatas saved in this storage.
     */
    validationMetadatas: ValidationMetadata[];
    /**
     * Gets all constraint metadatas saved in this storage.
     */
    constraintMetadatas: ConstraintMetadata[];
    /**
     * Adds a new validation metadata.
     */
    addValidationMetadata(metadata: ValidationMetadata): void;
    /**
     * Adds a new constraint metadata.
     */
    addConstraintMetadata(metadata: ConstraintMetadata): void;
    /**
     * Gets all validation metadatas for the given object with the given groups.
     */
    getValidationMetadatasForObject(object: Function, groups?: string[]): ValidationMetadata[];
    /**
     * Gets all validator constraints for the given object.
     */
    getValidatorConstraintsForObject(object: Function): ConstraintMetadata[];
}
/**
 * Default metadata storage used as singleton and can be used to storage all metadatas in the system.
 */
export declare let defaultMetadataStorage: MetadataStorage;
